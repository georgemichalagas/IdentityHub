#!/bin/bash

# IdentityHub gRPC Services Setup and Testing Script

echo "üöÄ IdentityHub gRPC Services Implementation Complete!"
echo "=================================================="
echo ""

echo "‚úÖ What has been implemented:"
echo "‚Ä¢ Added gRPC support to IdentityHub.Api project"
echo "‚Ä¢ Created Proto files for User and Auth services"
echo "‚Ä¢ Implemented GrpcUserService with the following endpoints:"
echo "  - GetUser (by ID)"
echo "  - GetUserByEmail"
echo "  - GetUsers (with pagination and search)"
echo "  - UpdateUser"
echo "  - UserExists"
echo "  - GetUserRoles"
echo ""

echo "‚Ä¢ Implemented GrpcAuthService with the following endpoints:"
echo "  - ValidateToken (JWT validation)"
echo "  - ValidateCredentials"
echo "  - CheckPermissions"
echo "  - RefreshToken"
echo ""

echo "‚Ä¢ Updated Program.cs to register gRPC services"
echo "‚Ä¢ Added configuration for gRPC in appsettings.json"
echo "‚Ä¢ Created comprehensive sample client code"
echo "‚Ä¢ Generated detailed documentation"
echo ""

echo "üìã Files created/modified:"
echo "‚Ä¢ IdentityHub.Api/Protos/user.proto"
echo "‚Ä¢ IdentityHub.Api/Protos/auth.proto"
echo "‚Ä¢ IdentityHub.Api/Services/Grpc/GrpcUserService.cs"
echo "‚Ä¢ IdentityHub.Api/Services/Grpc/GrpcAuthService.cs"
echo "‚Ä¢ IdentityHub.Api/Program.cs (updated)"
echo "‚Ä¢ IdentityHub.Api/IdentityHub.Api.csproj (updated)"
echo "‚Ä¢ IdentityHub.Api/appsettings.json (updated)"
echo "‚Ä¢ Samples/GrpcClientSample.cs"
echo "‚Ä¢ GRPC_README.md"
echo ""

echo "üîß Next steps to test the gRPC services:"
echo "1. Start PostgreSQL database:"
echo "   docker run --name postgres-identityhub -e POSTGRES_DB=identityhub -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres"
echo ""

echo "2. Run the IdentityHub API:"
echo "   cd IdentityHub.Api && dotnet run"
echo ""

echo "3. Test gRPC endpoints using grpcui (optional):"
echo "   # Install grpcui if not already installed"
echo "   go install github.com/fullstorydev/grpcui/cmd/grpcui@latest"
echo "   # Run grpcui against the server"
echo "   grpcui -plaintext localhost:5001"
echo ""

echo "4. Use the sample client code in Samples/GrpcClientSample.cs"
echo ""

echo "üåê Service Endpoints:"
echo "‚Ä¢ HTTP API: https://localhost:7001 (or http://localhost:5040)"
echo "‚Ä¢ gRPC Services: Available on the same endpoints"
echo "‚Ä¢ Swagger UI: https://localhost:7001/swagger"
echo ""

echo "üìñ Documentation:"
echo "‚Ä¢ See GRPC_README.md for detailed usage instructions"
echo "‚Ä¢ Proto files define the complete API contract"
echo "‚Ä¢ Sample client shows practical usage examples"
echo ""

echo "üîê Authentication:"
echo "‚Ä¢ Most UserService endpoints require JWT authentication"
echo "‚Ä¢ AuthService endpoints help validate tokens and credentials"
echo "‚Ä¢ Use the regular REST API to obtain JWT tokens first"
echo ""

echo "‚ú® Features implemented:"
echo "‚Ä¢ Full CRUD operations for users via gRPC"
echo "‚Ä¢ Token validation and refresh via gRPC"
echo "‚Ä¢ Permission checking via gRPC"
echo "‚Ä¢ Pagination and search for user listings"
echo "‚Ä¢ Comprehensive error handling"
echo "‚Ä¢ Proper nullable handling"
echo "‚Ä¢ Authorization support"
echo ""

echo "üéâ IdentityHub now supports both REST API and gRPC services!"
echo "You can connect from any gRPC-compatible client (C#, Python, Go, Java, etc.)"
